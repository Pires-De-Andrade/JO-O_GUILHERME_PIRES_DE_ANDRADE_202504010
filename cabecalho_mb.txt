# PROVA – Introdução à Programação (BIA) 
**Nome completo:** João Guilherme Pires de Andrade  
**Matrícula:** 202504010 
**E-mail institucional:** andrade_pires@discente.ufg.br

## Questão 1
### a) Nessa questão, fiz o input e trabalhei melhor com o tratamento de erro.
### b) Criei uma função que manda uma mensagem específica e permite estipular valores de intervalo. Se a resposta vier fora deste intervalo:
o programa diz para colocar apenas valores realistas; se for posta um string: o programa diz para colocar números.
### c) Criei uma função normal.
### d) Apresentei os dados no final

## Questão 2
### a) Coloquei o input de categorias, usando um "range('número de categorias')"
### b) Registrei o número de lançamentos, com a mesma técnica do "for".
### c) Para cada lançamento, pedi descrição, valor e categoria.
### d) No final, apresentei todo o pedido, utilizando pandas e manipulando dicionários.

## Questão 3
### a) Peguei minhas temperaturas da api Open Meteo, que não precisa de chave. São as temperaturas de Goiânia no mês de abril.
Usei numpy normalmente para calcular tudo.
### b) Peguei os dados Pandas, adicionei as novas colunas com base no pedido.
### c) Usei um lambda para criar uma função direto no df, o que foi bem prático.
### d) Usei lambda novamente. Tive dificuldade em enumerar os dias mais quentes e mais frios. Consegui atráves do "sort_values".
No final, mostrei a tabela com todos os dados.

## Questão 4
### Essa questão me fez pesquisar bastante. A prova em si não estava muito difícil, mas essa questão complicou muito.
Vi um vídeo de uma pessoa fazendo tetris usando matrizes (não queria usar pygame), utilizei algumas LLMs para entender a lógica, juntei tudo e fiz um modelo.
O mais complicado que achei em tudo isso foi juntar as informações das funções: muitas vezes, uma função inicial já depende de uma outra lá no final.
Por exemplo, saber se pode mover uma peça depende se uma outra já foi fixada.

## Questão 5

### a)  A framework utilizada no nosso grupo foi o Flask.
O Flask é amplamente utilizado no desenvolvimento de APIs e apliacações web de maneira simples.
Nosso grupo uptou por utilizá-lo haja vista nosso projeto de criar um app que possa averiguar a segurança de um link ou email. Primeiro, trabalhamos com a aplicação web para depois fazer o app.
Com o Flask, criamos rotas "@app" que vão redirecionar para templates html específicos, executando funções e fazendo uma ponte entre o backend e o frontend.

### b) No nosso projeto, o Flask foi protagonista na elaboração da nossa aplicação web.
Importando funções criadas para a análise de links e de emails de outros arquivos, buscando os templates html, o Flask criou pontes entre estes: redirecionando para páginas e executando funções dentro delas - a partir das rotas @app
Em detalhes, o Flask abre um servidor web, renderiza o html, e conecta funções.
Nesse exemplo simples, tem-se:

"""
from flask import Flask, render_template # Biblioteca Flask e o render_template para pegar o html
app = Flask(__name__) # cria o app Flask (o servidor)

@app.route('/') # Cria uma rota de redirecionamento
def home(): # Cria uma função simples
    nome = "Maria"
    return render_template("index.html", nome=nome) # Utiliza essa função para inserir dados no html

if __name__ == '__main__':
    app.run(debug=True) # Roda o app, com a renderização do html determinado e com a função conectada
"""

### c) Não há uma funcionalidade específica que estejamos tentando aplicar. No momento, pesquisamos como aplicar no nosso site o seguinte:
O flow de login para escolher uma conta google (credencial OAuth) e analisar o email. No código foi fácil, mas aplicar isso em Flask e html ainda está sendo pesquisado.
Portanto, não há exatamente uma funcionalidade que não aplicamos: estamos tentando descobrir ela, ou chegar a um resultado satisfatório com o que temos.

## Questão 6
### Fiz ela usando algumas apis: A api Open Meteo mais uma vez, e a api Open Street Map que dá coordenadas de cidade.
Fiz a interface usando Ttinker (muito legal de trabalhar). 
Funciona assim: Peço a sigla do estado e a cidade. O OSM analisa e devolve as coordenadas. As coordenadas são jogadas na Open Meteo e retornam as condições climáticas.
Pego esses dados e transformo em dicionários, que são expostos em uma caixa de texto. 
No final, o usuário pode atualizar constantemente seus dados ao colocar o nome da cidade e clicar em "Relatório Tempo"

## Observações:
### Tive, de fato, muita dificuldade no tetris. Achei um exercício distoante do resto e senti uma necessidade de "consciência" muito maior nessa questão.
Não teria conseguido fazer sozinho, sem pesquisas, vídeos e ajuda das LLMs.
